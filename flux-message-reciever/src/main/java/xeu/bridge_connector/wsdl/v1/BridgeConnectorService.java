/*
﻿Developed with the contribution of the European Commission - Directorate General for Maritime Affairs and Fisheries
© European Union, 2015-2016.

This file is part of the Integrated Fisheries Data Management (IFDM) Suite. The IFDM Suite is free software: you can
redistribute it and/or modify it under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or any later version. The IFDM Suite is distributed in
the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a
copy of the GNU General Public License along with the IFDM Suite. If not, see <http://www.gnu.org/licenses/>.
 */
package xeu.bridge_connector.wsdl.v1;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2016-01-29T13:39:17.251+01:00
 * Generated source version: 2.7.6
 * 
 */
@WebServiceClient(name = "BridgeConnectorService", 
                  wsdlLocation = "classpath:contract/bridge-connector.wsdl",
                  targetNamespace = "urn:xeu:bridge-connector:wsdl:v1") 
public class BridgeConnectorService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:xeu:bridge-connector:wsdl:v1", "BridgeConnectorService");
    public final static QName BridgeConnectorSOAP11Port = new QName("urn:xeu:bridge-connector:wsdl:v1", "BridgeConnectorSOAP11Port");
    static {
        URL url = BridgeConnectorService.class.getClassLoader().getResource("contract/bridge-connector.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(BridgeConnectorService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:contract/bridge-connector.wsdl");
        }       
        WSDL_LOCATION = url;   
    }

    public BridgeConnectorService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public BridgeConnectorService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BridgeConnectorService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BridgeConnectorService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BridgeConnectorService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BridgeConnectorService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns BridgeConnectorPortType
     */
    @WebEndpoint(name = "BridgeConnectorSOAP11Port")
    public BridgeConnectorPortType getBridgeConnectorSOAP11Port() {
        return super.getPort(BridgeConnectorSOAP11Port, BridgeConnectorPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BridgeConnectorPortType
     */
    @WebEndpoint(name = "BridgeConnectorSOAP11Port")
    public BridgeConnectorPortType getBridgeConnectorSOAP11Port(WebServiceFeature... features) {
        return super.getPort(BridgeConnectorSOAP11Port, BridgeConnectorPortType.class, features);
    }

}